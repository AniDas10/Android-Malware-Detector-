"""
Here we will engineer our features by performing any necessary transformations
The function shall accept a dataset 
Return -> dataset with the transformed dataset
Additionally we shall save our transformed dataset to avoid repetition

"""
import pandas as pd
import numpy as np
import scipy.stats as stat
import pylab
from sklearn.preprocessing import RobustScaler

def feature_engineering(df):
    # perform experiments on notebooks and implement the final version in this pipeline here.
    # pd.to_csv(df, '../dataset/train_df_transformed.csv')

    # based on analysis we see only one column of Ratings needs to be transformed
    # applying boxcox transformation
    df = df[df['Number of ratings']>25]
    df.loc[:,'Rating'], parameters = stat.boxcox(df.loc[:,'Rating'])

    # add more engineering tasks further here
    df.loc[:,'Dangerous permissions count'] = df['Dangerous permissions count'].fillna(value=0)

    # we need to scale the column number of ratings
    scaler = RobustScaler()
    df.loc[:,'Number of ratings'] = scaler.fit_transform(df[['Number of ratings']])

    return df


if __name__ == '__main__':
    df = pd.read_csv('../dataset/train_with_folds.csv')
    redundant_cols = ['Unnamed: 0','Unnamed: 0.1', 'Description', 'Category']
    safeCols = [col for col in df.columns.values if '(S)' in col]
    df = df.drop(columns=safeCols+redundant_cols)
    df = feature_engineering(df)
    print(df.head(10))